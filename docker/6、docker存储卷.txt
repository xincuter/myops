6、docker存储卷

什么是数据卷：
	docker镜像由多个只读层叠加而成，启动容器时，docker会加载只读镜像层并在镜像栈顶部添加一个读写层；
	如果运行中的容器修改了现有的一个已经存在的文件，那该文件将会从读写层下面的只读层复制到读写层，该文件的只读版本仍然存在，只是已经被读写层中该文件的副本所隐藏，此即"写时复制（COW）"机制。
	
	

存储卷：数据与容器分离；


为什么要使用存储卷？
关闭并重启容器，其数据不受影响，但删除docker容器，则其更改会全部丢失；
存在的问题：
	存储于联合文件系统中，不易于宿主机访问；
	容器间数据共享不便；
	删除容器其数据会丢失；
	
解决方案：卷（value）
	卷是容器上的一个或多个目录，此类目录可绕过联合文件系统，与宿主机上的某目录绑定（关联）。
	
	

数据卷：
卷为docker提供了独立于容器的数据管理机制；
	可以把"镜像"想象成静态文件，例如"程序"，把卷类比为动态内容，例如"数据"；于是，镜像可以重用，而卷可以共享；
	卷实现了"程序（镜像）"和"数据（卷）"分离，以及"程序（镜像）"和"制作镜像的主机"分离，用户制作镜像时无须再考虑镜像运行的容器所在的主机的环境。
	
	

	
卷类型：
docker有两种类型的卷，每种类型都在容器上存在一个挂载点，但其在宿主机上的位置有所不同；
	（1）Bind-mount volume：绑定挂载卷；手工明确指定；
	（2）Docker-managed volume：由docker进程自动创建维护；
	
	

	
在容器中使用volumes：
docker run命令使用-v选项即可使用volume；
<1> Docker-managed volume
	docker run -it -d --name bbox1 -v /data busybox   【创建容器并指定数据卷为/data,即容器中卷目录为/data，并没有指定宿主机目录与之相关联，则docker会自动创建宿主机目录与之相关联，这个目录由docker进程维护】
	
	查看bbox1容器的卷、卷标识符以及挂载的主机目录：
	docker inspect -f {{.Mounts}} bbox1
	结果为：[{volume b7c660167ab7257502e8f44335877528b2cc399ae54d281b34fb952c998cba84 /var/lib/docker/volumes/b7c660167ab7257502e8f44335877528b2cc399ae54d281b34fb952c998cba84/_data /data local  true }]    【这表示宿主机卷目录为/var/lib/docker/volumes/b7c660167ab7257502e8f44335877528b2cc399ae54d281b34fb952c998cba84/_data，bbox1容器内部卷目录为/data；即将这两个目录相互关联】
	
<2> Bind-mount volume    【实现容器数据的持久化存储】
	docker run -it -d -v HOSTDIR:VOLUMEDIR --name bbox2 busybox   【创建容器bbox2，并指定数据卷目录，既指定宿主机卷目录，也指定容器内卷目录】
	
	查看bbox1容器的卷、卷标识符以及挂载的主机目录：
	docker inspect -f {{.Mounts}} bbox2
	
	
	

共享卷（sharing volumes）：
（1）多个容器的卷使用同一个主机目录；
	例如：
	docker run -it -d --name c1 -v /docker/volumes/v1:/data busybox
	docker run -it -d --name c2 -v /docker/volumes/v1:/data busybox
	
（2）复制使用其他容器的卷，为docker run命令使用--volumes-from选项
	例如：
	docker run -it -d --name bbox1 -v /docker/volumes/v1:/data busybox
	docker run -it -d --name bbox2 --volumes-from bbox1 busybox


	
docker内置编排工具：docker-compose   【单机编排工具】