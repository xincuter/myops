DNS相关概念详解

linux主要服务讲解：
DNS：域名解析，目前dns服务器主要基于BIND软件实现构建的。
SSL/TSL：http-https，OpenSSL，CA,Digital Certificate，PKI
HTTP：http协议，Apache，LAMP（apache+mysql+php）；Nginx（Engine X），LNMP(LEMP,[nginx+mysql+php])
存储服务：varnish
CDN(内容分发网络)：DNS(view)+varnish
FILE server：NFS、SMB/CIFS、FTP
netfilter：iptables（filter、nat、mangle、raw）【这是内核中的功能】；tcp wrapper工具（功能不如iptables强大）
NSSwitch：即网络服务转换；只是提供一个平台完成名称解析【framework（框架），platform】，PAM
SMTP/POP3/IMAP4：Mail Server
SELinux：security enhanced linux，操作系统的安全分级别【A，B，C，D；A级别安全最高（linux与windows安全级别一致，为C2级别，只是linux系统运行更稳定，但是加上selinux机制，linux的安全级别可以提升至B1级别）】；selinux运行于内核中
MySQL：应用广泛的数据库
集群：lvs，keepalived，haproxy等等
 


PAM：可插入式模块



域：由多台主机组成的一个范围叫做一个域；域分级别

【注：例如www.magedu.com，这是主机名（即FQDN：full qualified domain name，完全限定域名），只是magedu.com域中的一台主机】

DNS：全称domain name server，域名服务；主要用来进行域名解析（背后有查询过程，数据库），实现FQDN与ip地址之间的双向映射。
     FQDN <---> IP地址
     172.16.0.1   www.magedu.com
     172.16.0.2   mail.magedu.com

名称解析：分很多种类，包括服务与端口的映射、FQDN与ip映射、用户名与UID映射、组与GID的映射等等

 
NSSwitch：为各种名称解析提供平台。

实现域名解析所用到的库文件：libnss_files.so和libnss_dns.so，通过nsswitch服务调用这两个库文件来实现dns解析。

NSSwitch的配置文件是/etc/nsswitch.conf
      该配置文件中，hosts：files  dns 【定义了dns查询顺序】
                    files：/etc/hosts
                    dns：DNS服务器
      【domain解析：先查找本地缓存/etc/hosts,如果没有结果，则再通过DNS服务器进行解析，然后返回给客户端结果】

stub resolver：名称解析器【当需要进行域名解析时，该解析器会去访问nsswitch配置文件，按照hosts该行定义的dns查询顺序来进行域名解析服务】

IP地址是用来唯一标识一台主机在网络中的位置


主机如何识别域名来将其转换为IP地址：
（1）/etc/hosts文件【每台主机都有这个文件，相当于本地缓存】
     hosts文件的格式：【分为三列：IP地址、主机名、别名】
             IPADDRESS         FQDN            Aliases
       例如：172.16.0.1    www.magedu.com        www
（2）DNS服务器
        分为两种管理模式：
                    集中式数据库
                    分布式数据库
     

IANA（互联网地址名称分配机构）：IP，FQDN【IANA维护IP地址与主机名的映射表】
ICANN：管理最顶级的域名。



域名的分层结构【相当于linux的目录结构】：
通过授权实现分层管理，每一层级都有下一层级的管理者的域名到ip的数据库。
格式：主机名.三级域名.二级域名.顶级域名.【最后的那个点代表根域，可以省略不写】
【注：本地仅知道其直接下级所在，不知道上级所在，但都知道根域所在】

根域：一般用.表示，可以省略不写。
顶级域：【TLD，代表组织或者国家，由根域统一管理】
      组织域：例如：.com、.org、.net、.cc
      国家域：例如：.cn、.hk、.jp
      反向域：IP--->FQDN【即反向解析】
              FQDN--->IP【即正向解析】 

【为了安全而言，根域服务器是不给任何人递归的】

每个域都有一个管理者，维护域内所有FQDN--->IP的数据库表    

域权威记录
非权威记录

DNS服务器工作内容：
1、接受本地客户端查询请求【递归方式】
2、外部客户端请求：请求权威记录，然后缓存【递归加迭代】
           肯定答案：TTL
           否定答案：TTL
3、外部客户端请求：非权威记录【递归加迭代】


一台DNS服务器可以维护多个域，每个域使用一张数据库【即一个ip对应多个域名】
一个域名也对应多台dns服务器【即一个域名对应多个ip，dns的高级功能，实现负载均衡】
       

DNS的查询方式：
    递归：只发出一次请求【对于客户端发起请求给本地dns服务器】
    迭代：发出多次请求【dns服务器之间】

【注：全球共有13台根域服务器（分别是a.root-servers.net. -- m.root-servers.net.】

保证根域服务器安全：
(1)保证物理安全
(2)网络安全


DNS服务器的主从结构：
       主DNS服务器：数据修改都在主服务器上修改
       辅助DNS服务器：定期向主DNS服务器发起请求数据同步

辅助DNS服务器如何监控主DNS服务器状态及同步数据：【即定义主从同步属性】
   serial number：版本号【最多10个字符串】
   refresh：检查的时间周期【定义每隔多长时间辅助服务器去检查主服务器的版本号】 
   retry：重试时间
   expire：过期时间             
   nagative answer TTL：否定记录存活周期

DNS服务器的常见类型：
       主DNS服务器：数据修改都在主服务器上修改
       辅助DNS服务器：定期向主DNS服务器发起请求数据同步
       缓存DNS服务器：不负责应答，只为了缓存信息
       转发器：只转发请求，自己不做解析


DNS域名解析需要依赖数据库来完成解析工作。


DNS数据库中的每一个条目称作一个资源记录（resource record，RR）
资源记录的格式：【有以下五段组成】
        NAME     [TTL]          IN           RRT         VLAUE
        (名称) （生存周期）  （internet） （RR类型）     (值)
例子：www.xin.com.            IN            A        2.2.2.2
      2.2.2.2                 IN           PTR   www.xin.com.

资源记录中TTL段可以省略，可全局定义；

资源记录的类型：
SOA(start of authority)：用来标明一个区域内部主从服务器之间如何同步数据，以及起始授权对象是谁的；必须是第一条记录
  格式：ZONENAME  TTL  IN  SOA  FQDN  administrator_mailbox(  
                          serial number
                          refresh
                          retry
                          expire
                          na ttl)
   时间单位：M(分钟)H（时）D（天）W（周），默认为秒
   邮箱格式：不能使用@符号，用.来代替（如：admin@magedu.com--->admin.magedu.com）【因为@有特殊意义，可以用@表示区域名】
 如：magedu.com.  600 IN SOA ns1.magedu.com.  xin.magedu.com（
                     2013040501
                     1M
                     5M
                     1W     【每行后可加分号，再跟注释信息】
                     1D ）
NS(nameserver)：即zone name--->FQDN【这里的FQDN指的是管理这个区域的那台dns服务器的主机名，除此之外还要给这台FQDN添加一条A记录；NS可以有多台，主从关系是定义区域时来指定,无需在此定义】
   例子：magedu.com.       600  IN   NS   ns1.magedu.com.
         magedu.com.       600  IN   NS   ns2.magedu.com.
         ns1.magedu.com.   600  IN   A    1.1.1.2
         ns2.magedu.com.   600  IN   A    1.1.1.5
MX(mail exchange)：zone name--->FQDN【同样也需要额外为每台邮件服务器都添加一条A记录，邮件服务器也可以有多台】
   格式：ZONENAME        TTL    IN   MX  pri       VLAUE
   优先级：0-99，数字越小优先级越高。
   例子：magedu.com.     600    IN   MX   10  mail1.magedu.com.
         magedu.com.     600    IN   MX   15  mail2.magedu.com.
         mail1.magedu.com. 600   IN    A       1.1.1.3
         mail2.magedu.com. 600   IN    A       1.1.1.4
A(address)：FQDN--->ipv4【即将主机名转换成IPv4地址】
AAAA：FQDN--->ipv6【即将主机名转换成ipv6地址】
PTR（pointer）：指针记录，ip--->FQDN【即将ip地址转换成FQDN】
CNAME（canonical name）：FQDN--->FQDN【即别名记录】
      例如：magedu   IN   CNAME    www.magedu.com.
TXT
CHAOS
SRV

 

域和区域：
域：domain；逻辑概念
区域：zone；物理概念


DNS服务器的两种解析方式：【dns解析需要依赖数据库，所以两种解析方式需要两个数据库文件】
（1）正向解析【FQDN--->IP】
（2）反向解析【IP--->FQDN】




规划dns服务器例子：
域名：magedu.com     
网段：192.168.0.0/24
主机：www  192.168.0.2
      mail 192.168.0.3，MX

在上级域中定义授权：
.com
magedu.com.     IN   NS   ns.magedu.com.
ns.magedu.com.  IN   A    192.168.0.10

然后接下来就部署这台dns服务器即可，之后在本区域内规划主机，然后建立区域文件用于解析用。

【zone的区域文件是资源记录的集合，区域文件第一条记录必须是SOA记录】

建立两个区域文件：
正向区域文件：
magedu.com.    IN   SOA  ...

www.magedu.com.   IN   A   192.168.0.2
可以简写为：
www    IN     A    192.168.0.2  【系统会自动补上区域名】

反向区域文件：【SOA记录格式：（反网段地址）.in-addr.arpa.】
0.168.192.in-addr.arpa.   IN   SOA  ...

2.0.168.192.in-addr.arpa.    IN  PTR    www.magedu.com. 
【反向区域中，FQDN不可以简写，因为补上的区域后缀是0.168.192.in-addr.arpa.】



区域传送类型：
    完全区域传送：axf【从服务器为空，完全同步主服务器数据】
    增量区域传送：ixfr【主服务器改变，主动通知从服务器同步】

区域类型【按照传输数据来分】
    主区域：master
    从区域：slave
    起始区域（即根区域）：hint
    转发区域（转发客户端请求）：forward



安装和配置DNS服务器：

部署案例：
申请的域名：magedu.com      IP地址段：172.16.100.0/24

规划：
ns   172.16.100.1
www  172.16.100.1 ，172.16.100.3
mail 172.16.100.2
ftp  www


DNS：通过BIND软件来实现和构建dns服务器。
     BIND软件是由伯克利分校研究开发出来的，是目前应用最广泛的名称服务软件。

ISC（互联网系统组织）：维护BIND软件


BIND软件包介绍：
bind97包是服务器端软件
utils包是提供dns常用工具的软件包
devel包用于二次开发
chroot包用于根切换，保护系统安全
caching-nameserver包用于将dns服务器配置成为缓存dns服务器


安装BIND：
安装bind服务器端软件：【yum install BIND97】
安装bind的libs包和utils包：【yum install bind97-libs bind97-utils】
安装bind的chroot包：【yum install bind97-chroot】


BIND97：
    主配置文件：/etc/named.conf【主要用于定义BIND进程的工作属性、区域的定义等等】
    rndc配置文件：/etc/rndc.key【是个密钥文件，是用来让rndc工具能够进行远程控制dns服务进程启动、关闭等工作的】
                       rndc：remote name domain controller
                       密钥文件
                       配置信息：/etc/rndc.conf
    区域数据文件：需要管理员自己手动创建和定义的，默认保存在/var/named/目录下。
    
    服务控制脚本：/etc/rc.d/init.d/named
                      {start|stop|restart|status|configtest}
    服务脚本的配置文件：/etc/sysconfig/named

    二进制程序：named【即BIND的进程】

bind chroot：
     默认：named
         用户：named
         组：named
     使用chroot后，以/var/named/chroot为真正的根，保证系统安全
         /var/named/chroot/
                   etc/named.conf
                   etc/rdnc.conf
                   sbin/named
                   var/named/


配置dns服务器：
缓存--->主--->从



配置dns服务器步骤：
（1）使用yum安装BIND软件包
     安装服务器端包：【yum install bind97 -y】
               /usr/sbin/named-checkconf【检查配置文件语法】
               /usr/sbin/named-checkzone【检查区域文件语法】
（2）修改主配置文件/etc/named.conf
             配置文件一般有四段：【options全局配置段、log日志配置段，zone区域配置段以及include字段（即额外配置文件）】
（3）定义域数据文件
         根区域文件：/var/named/named.ca【定义了13个根域服务器的位置】；若没有该文件，可以使用dig命令来手动创建。
         本地主机域数据文件：/var/named/named.localhost【本地主机的正向解析】和/var/named/named.loopback【本地主机的反向解析】 
         定义想要配置的区域数据文件，自己命名。



命令1：
dig  ---（domain information gropher）；dns查询工具
     格式：dig +选项 +资源类型(RRT) +NAME【后面的name要与前面的资源类型对应（即资源类型所对应的名称）】           
               -t：指定资源类型查询
              【如：dig -t NS .（借助本地服务器查询根域所有的NS记录，前提是主机要能上网）】
              【dig -t NS . @a.root-servers.net. （表示借助a.root-servers.net.这台服务器来查找所有根域的NS记录）】  
               -x +ip：根据IP地址查询FQDN
               【如：dig -x 172.16.0.1】 
               + 工作模式（如：tcp，recurse...）【表示dns服务器以某种工作模式工作】
               +trace：表示追踪查询过程
       
启动dns服务器进程：【service named start或/etc/init.d/named start】

命令2：
host  ---dns查询工具
也可以使用host命令查找资源记录【host -t +RRT +NAME】
如：host -t NS ns1.magedu.com


命令3：
nslookup  ---dns查询工具
交互式命令：
nslookup
指定dns服务器：server +dns服务器IP地址
指定资源记录类型进行查询：
set q={A|NS...}
www.magedu.com




DNS监听的协议及端口：
       53/ucp
       53/tcp
       953/tcp【rndc监听】

socket：套接字，当两个不同主机的进程需要通信，一般来讲服务器需要在某个位置上等待客户端的请求，这个位置一定要定义，这个位置即套接字，格式为【IP地址:端口】
        C/S架构：client/server
           127.0.0.1:53【表示只能接收本机的请求】
           172.16.100.1:53【可以接受外部主机的请求】
           0.0.0.0:53【监听本地所有地址的53号端口】
           


DNS主配置文件/etc/named.conf内容：
语法规则：每一行结束必须用分号结尾；每个花括号前必须有空格
1、options段定义的是dns服务器的工作属性（即全局参数），【最重要的部分是定义dns的区域数据文件目录，即directory “/var/named”;】
   
2、区域的定义：
   格式： 
     zone "ZONE NAME" IN {
           type {master|slave|hint|forward};
           file "zhengshen.com";   【定义区域数据文件的路径，使用的是相对路径，即相对于主配置文件的directory定义的路径而言】                                     
     };

   主区域：
       除了以上的格式，还需要定义区域数据文件所在
       file "区域数据文件";
   从区域
       file "区域数据文件";
       masters {master_ip;};【定义主服务器的dns的IP地址】
   根区域：
       指定类型为hint，然后定义file所在即可


临时性关闭selinux：
查看selinux状态：getenforce   
关闭selinux：setenforce 0  【状态为enforcing】
启动selinux：setenforce 1  【状态为permissive】


永久关闭：
修改selinux的配置文件/etc/selinux/config或者链接文件/etc/sysconfig/selinux，然后重启主机


检查dns服务器主配置文件语法【named-checkconf】
检查dns服务器区域文件语法【named-checkzone +“区域名” +域数据文件】



创建域数据文件：
格式：
NAME    [TTL]   IN     RRT    VLAUE

正向解析文件例子：
$TTL 600
magedu.com. IN  SOA  ns1.magedu.com. admin.magedu.com. （
                     2013040104
                     1H
                     5M
                     1D
                     6H )
magedu.com.       IN    NS    ns1.magedu.com.
ns1.magedu.com.   IN    A     172.16.0.1
                  IN    MX    10     mail
mail              IN    A     172.16.0.2
www               IN    A     172.16.0.3
www               IN    A     172.16.0.4
ftp               IN    CNAME    www
【注：区域名称可以省略不写，系统会自动补全】                              

反向解析文件例子：
反向区域名定义格式必须是【反网段.in-addr.arpa】，如0.16.172.in-addr.arpa；但是区域数据文件的命名可以任意。

$TTL 600
@  IN  SOA  ns1.magedu.com. admin.magedu.com. （
                     2013040104
                     1H
                     5M
                     1D
                      6H )
                  IN    NS    ns1.magedu.com.
1                 IN    PTR   ns1.magedu.com.
2                  IN    PTR   mail.magedu.com.
3                  IN    PTR   www.magedu.com.
4                  IN    PTR   www.magedu.com.
ftp               IN    CNAME    www





DNS主从复制及区域传送

泛域名解析：【格式为：*.magedu.com.  600  IN   A   172.16.0.3】

错误页面重定向

dns服务器给所有的客户端请求递归，必须是合法的请求【即不能给所有的客户端递归；能上网的话，可以给客户端做任何域的递归】。

定义递归对象？
在dns主配置文件中的options全局段中定义
（1）recursion {yes|no};【开启或关闭递归功能】
（2）allow-recursion { 172.16.0.0/24; };【只给172.16.0.0/24网段递归】

定义只允许谁来查询：
allow-query { localhost; };【定义只允许本机来进行dns查询】



axfr：完全区域传送 
      如：dig -t axfr magedu.com @192.168.3.130【获得指定区域内的所有记录】
ixfr：增量区域传送
      如：dig -t IXFR=2013040201 magedu.com【可以获取到区域变化的内容（每次修改以后，序列号需要加1）】
【可以使用dig命令实现上述功能】


区域传送很不安全，只允许从服务器进行区域传送


如何定义区域传送？
需要在定义每个区域时，使用【allow-transfer {;};】语句来定义。
    例如：allow-transfer { 172.16.100.2; };【表示只允许172.16.100.2这台从服务器进行区域传送】
          allow-transfer { none; };


如何建立从服务器？
【只需要安装bind软件，修改主配置文件即可，不需要建立区域数据文件】
从服务器的主配置文件修改如下：
【大致配置跟主dns服务器一样，只需要部分内容修改即可】
案例如下：
zone "magedu.com"  IN	{
      type slave ;        【定义从服务器角色】
      file "slaves/magedu.com.zone"; 【定义从主服务器上同步过来的区域数据文件的保存路径，使用相对路径即可】
      masters { 172.16.100.1; }; 【定义主服务器是谁】
      allow-transfer { none;}; 【不允许任何进行区域传送】



定义主从服务器时，可以只定义正向主从或反向主从，也可以全部定义。

【注：在配置过程中出现权限问题时，通过查看日志来排错】


定义同步传送通知功能：
option语句中定义：【notify yes;】



如何使用rndc来控制dns服务器

rndc命令的使用

命令4：
rndc  ---域名服务器控制工具
      格式：rndc 选项 {congfig|server|...} +子命令
            -c：指定rndc配置文件读取key文件【默认就读取】
            -s：指定服务器
            -p：指定端口
      rndc的子命令有：
            status：查看域名服务器状态
            stop：关闭域名服务器
            flush：清除缓存

【默认情况下，生成的rndc key只能控制本机域名服务器，如果想要控制远程域名服务器，则需要在主配置文件中的rndc key字段中修改，一般只使用rndc来控制本机即可。】


【注：为了增加安全性，在使用rndc命令管理域名服务器时，需要首先使用rndc-confgen命令来生成一个key文件（rndc-confgen > /etc/rndc.conf），再使用rndc来管理服务器】


命令5：
rndc-confgen  ---rndc key生成工具【为了增强安全性】
              格式：rndc-confgen > /etc/rndc.con【将生成的/etc/rndc.conf文件中的注释内容复制到/etc/named.conf文件中去即可】
  


DNS子域授权详解

案例：
域：magedu.com
    www.magedu.com   【本组织】 ---相当于父域
      www.fin.magedu.com 【组织财务部】     ---子域1
      www.market.magedu.com 【组织市场部】  ---子域2


任何一个子域都必须得到父域的授权才可以
子域和父域可以不再同一网段，只要路由互通即可


正向区域实现子域授权：【即在父域上建立子域的NS记录和A记录】
写法格式如下：       
  SUB_ZONE_NAME   IN  NS  NSSERVER_SUB_ZONE_NAME（子域管理者）
  NSSERVER_SUB_ZONE_NAME   IN   A    IP地址  

例子如下：
如果注册域名是：magedu.com 

.com上授权：
    magedu.com.     IN   NS    ns1.magedu.com.
                    IN   NS    ns2.magedu.com.
    ns1.magedu.com. IN   A     172.16.100.1 
    ns2.magedu.com. IN   A     172.16.100.2   

magedu.com上授权：
    fin.magedu.com.      IN   NS   ns1.fin.magedu.com.
    ns1.fin.magedu.com.  IN   A    192.168.2.50
    market.magedu.com.      IN   NS   ns1.market.magedu.com.
    ns1.market.magedu.com.  IN   A    192.168.2.51
 


定义子域将所有请求转发给父域解析：【即定义转发】
可以在options字段中全局定义：
       forward {only|first}; 【定义转发模式】
       forwarders { 172.16.100.1; };【定义转发给谁来解析（即定义转发器）】

也可以只定义某个区域转发：【即在子域服务器上定义父域时，转发】
       zone "ZONE_NAME" IN {
             type  forward;
             forward first;
             forwarders { 172.16.100.1; }; 
       }; 





DNS的视图及日志系统详解

定义acl：【在主配置文件中定义即可，但必须事先定义后才能使用】
格式：acl ACL_NAME {
         172.16.0.0/16;      
         127.0.0.0/8;
      };

【如何使用allow-recursion {}、allow-query {}、allow-transfer {}定义很多的网段时，可以使用acl定义，然后调用acl名称即可，简化了配置过程】

acl例子：
   acl innet {
       172.16.0.0/16;
       10.0.0.0/8;
       192.168.0.0/16;
   };   

调用acl：allow-query { innet; }; 【允许innet中定义的网段查询】          allow-transfer { innet; };【允许innet中定义的网段的主机进行区域传送】


DNS的相关书籍：[DNS and BIND]



DNS的高级功能：
视图功能（view）
     dns服务器能够根据客户端来源所属网络进行判断，并且返回一个离他最近的dns服务器响应给客户端，这种机制称为智能DNS（即DNS的视图功能）
     dns服务器可以在内部定义视图功能【也需要将整体的域数据文件划分成多个不同的域数据文件以响应不同网段客户端的请求】

可以根据全国各个区域不同网络将域数据文件分成多个，来实现CDN架构【离客户端最近的dns服务器响应客户端的请求】。

源服务器和缓存服务器 

静态内容才能缓存


CDN架构：能够判断客户端所属网络，并返回离其最近的dns服务器响应其请求。


智能dns案例：
电信客户端：172.16.0.0/16
联通客户端：192.168.1.0/24

通过设置实现根据不同来源客户端网络，智能响应其请求。
每一个视图必须都有一个域数据文件

定义视图功能：
    语法格式：view VIEW_NAME {
              
              };

【注：一旦定义了视图，所有的区域必须都定义在视图中】

例子如下：
       acl telecom {             
           172.16.0.0/16;
       };                  【通过定义acl来匹配客户端来源网络】

       view telecom {                   【定义电信客户端view】
             match-clients { telecom; };【匹配acl telecom中定义的电信客户端网络】
             zone "magedu.com" IN {
                    type master;
                    file "telecom.magedu.com.zone"; 
              };
             zone "100.16.172.in-addr.arpa." IN {
                    type master;
                    file "telecom.172.16.100.zone"; 
             };
        };

       view unicom {
             match-clients { any; };
             zone "magedu.com" IN {
                    type master;
                    file "unicom.magedu.com.zone"; 
             };
             
             zone "100.16.172.in-addr.arpa." IN {
                    type master;
                    file "unicom.172.16.100.zone"; 
             };
        };

【view中定义的域数据文件也必须存在，所以必须创建】

【注：如果对某个域的解析不区分网络，可以在每个定义的view中都定义该域即可】


DNS解析：需要事先定义好【区域】和【域数据文件】即可

如果想要解析更多的区域的话，需要通过将数据放入数据库中来实现更方便的管理，只是速度回慢些。


智能dns服务器运营商：
（1）dnspod
（2）www.dns.la



DNS的日志系统功能

如何启用dns的日志功能？
在主配置文件中的options全局字段中定义：【querylog yes;】

日志系统参数：
catagory：日志源【即定义日志类别来源,共15种】
      查询
      区域传送
    【可以通过category自定义日志来源】

channel：日志保存位置【即定义日志保存路径格式】
     两种保存路径方式：
           （1）syslog【syslog是有日志级别的，共7个，从高到低依次是critical、error、warning、notice、info、debug、dynamic；默认是info级别】

  如何定义channel？
    格式：channel CHANNEL_NAME {日志方式;severity日志级别;};
        【例子：channel xin_syslog {syslog daemon;severity info;}】;   
           （2）file：自定义保存日志信息的文件


【一个category可以对应多个channel，但一个channel只能对应一个category】

定义dns的日志系统，需要定义在【logging {};】段内

定义日志系统案例：
    logging {
       channel my_file {
          file "log.msgs" versions 3 size 10K; 【定义日志保存格式为file、版本、文件大小】
          severity dynamic;【定义日志级别】
          print-time yes;      【记录时间】
          print-severity yes;  【记录日志级别】
          print-category yes;  【记录日志类别】
       };
       category xfer-in { my_file;}; 【定义日志类别，{}中定义的是，该类别的日志信息保存在my_file定义的文件中去】
       channel my_syslog {
          syslog local0;
          severity info;
       };
       category update { my_syslog;};
    };



如何测试dns服务器的性能？
dnstop软件：监控dns服务器查询请求的【可以源码编译安装来监控dns服务器的性能】
queryperf软件包：对dns服务器做压力测试
      首先需要安装queryperf软件包；接下来就可以使用queryperf命令来对dns服务器做压力测试。
      命令7：
      queryperf  ---dns服务器压力测试工具
              -d +文件：指定数据文件【定义查询什么内容】
              -s：指定dns服务器
              -p：指定端口
              -q：指定查询次数
          例子：【queryperf -d /root/test -s 172.16.100.1】
