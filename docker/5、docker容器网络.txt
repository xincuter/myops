5、docker容器网络

添加网络名称空间：
	ip netns子命令
		ip netns help
		


ip netns子命令：【添加网络名称空间】
	add NETNS_NAME: 添加网络名称空间；
	list：列出所有的网络名称空间；
	exec NETNS_NAME COMMAND: 在指定的网络名称空间中执行命令；
		例如：ip netns exec r1 ifconfig -a    【在r1中执行ifconfig命令】
		例如：ip netns exec r1 ip link set dev veth1.2 name eth0 【将分配给r1名称空间的网卡veth1.2改名为eth0】
		

ip link子命令：【创建虚拟网卡对，设定】
	add name NET_NAME type TYPE peer name NET2_NAME：创建一对虚拟网卡；
		例如：ip link add name veth1.1 type veth peer name veth1.2
			  ip link show         【查看会发现veth1.1和veth1.2都是成对出现】
	
	set dev NET_DEVICE netsh NETNS_NAME：将网卡设备关联至特定网络名称空间中；【即将网卡设备分配给名称空间】
		例如：ip link set dev veth1.2 netns r1      【将网卡veth1.2关联至名称空间r1上】
			  ip link show        【查看会发现只有veth1.1在了】
			  ip netns exec r1 ifconfig -a 【查看发现veth1.2已经关联至r1上了】
			  
		测试宿主机与名称空间通信：
			（1）启用并配置宿主机上的网卡veth1.1
				ifconfig veth1.1 10.1.0.1/24 up
			（2）启用并配置名称空间r1上的网卡veth1.2（即改名后的eth0）
				ip netns exec r1 ifconfig eth0 10.1.0.2/24 up
			（3）测试通信
			
			
设备从属名称空间切换


例子：
docker run --name t1 -it --hostname "b1.trc.com" --network bridge --rm busybox:latest   【运行一个名称为t1的容器，指定网络类型为bridge（默认就是），--rm表示退出则删除容器;--hostname指定主机名，不指定默认为容器ID】

其他选项（通过外部注入到容器内部）：
	--add-host DOMAIN:IP：添加主机名解析；
	--dns IP：添加dns；
	--dns-search STRING：添加搜索域；
	-h或--hostname：添加主机名；
	
	

	
实现容器通信【内部访问和外部访问】：
docker0为NAT桥，因此容器一般获得的是私有网络地址；
可以把容器想象成宿主机NAT服务背后的主机；
如果开放容器或其上的服务为外部网络访问，需要在宿主机上为其定义DNAT规则，例如：
	对宿主机某ip地址的访问全部映射给某容器地址；
		主机ip ---> 容器ip
			-A PREROUTING -d 主机ip -j DNAT --to-destination 容器ip
			
	对宿主机某ip地址的某端口的访问映射给某容器地址的某端口；
		主机ip:port ---> 容器ip:port
			-A PREROUTING -d 主机ip -p {tcp|udp} --dport 主机端口 -j DNAT --to-destination 容器ip:容器port
	
为docker run命令使用-p选项即可实现端口映射，无需手动添加规则；

-p选项的使用格式：
	-p <containerPort>：将指定的容器端口映射至主机所有地址的一个动态端口；
	-p <hostPort>:<containerPort>：将容器端口<containerPort>映射至指定的主机端口<hostPort>；
	-p <ip>::<containerPort>：将指定的容器端口<containerPort>映射至主机指定<ip>的动态端口；
	-p <ip>:<hostPort>:<containerPort>：将指定的容器端口<containerPort>映射至主机指定的<ip>的端口<hostPort>；
	
	动态端口指随机端口，具体映射结果可使用docker port命令查看；
	
	
-P选项或--publish-all将容器的所有计划要暴露的端口全部映射至主机端口
	计划要暴露的端口使用--expose选项指定：
		例如：
		docker run -d -P --expose 2222 --expose 3333 --expose 80 --name web myhttpd_server:v0.1-1      【将容器的80,2222,3333全部映射到宿主机上】
		
		查看容器端口映射信息：
		docker port web
		结果为：
			3333/tcp -> 0.0.0.0:32770
			80/tcp -> 0.0.0.0:32772
			2222/tcp -> 0.0.0.0:32771
			
	如果不想使用默认的docker0桥接口，或者需要修改此桥接口的网络属性，可通过为docker daemon命令使用-b、--bip、--fixed-cidr、--default-gateway、--dns以及--mtu等选项进行设定；
	
	
例子1：创建并运行一个名为httpd_server02的容器，并将容器的80
端口映射至宿主机的80端口（即DNAT）
docker run -it -d --name "httpd_server02" -p 80:80 myhttpd_server:v0.1-1   【-d表示在后台运行容器】




联盟式容器（joined container）：
两个或多个容器共享名称空间的情况；

例子1：创建两个容器httpd_server02和httpd_server03，httpd_server03共享httpd_server02的网络名称空间；
	##创建httpd_server02
	docker run -it -d --name "httpd_server02" -p 80:80 myhttpd_server:v0.1-1
	##创建httpd_server03，且共享httpd_server02的名称空间
	ocker run -it -d --name "httpd_server03" --network container:httpd_server02 busybox:latest         
	【--network container:httpd_server02表示共享容器httpd_server02的网络名称空间】


例子2：还可以实现容器共享宿主机的网络名称空间，这样外部即可直接访问，不需要做DNAT映射；
	##创建容器httpd_server04，且共享宿主机的网络名称空间
	docker run -it -d --name "httpd_server03" --network host busybox:latest   【--network host表示指定网络为host，即共享宿主机网络名称空间】
	
	在容器中搭建web服务，监听81端口；浏览器输入http://宿主机ip:81测试即可




如何修改docker网络桥配置：
自定义docker0桥的网络属性信息：/etc/docker/daemon.json文件；
案例如下：
vim /etc/docker/daemon.json
	{
		"bip": "192.168.1.5/24",
		"fixed-cidr": "10.20.0.0/16",
		"fixed-cidr-v6": "2001:db8::/64",
		"mtu": 1500,
		"default-gateway": "10.20.1.1",
		"default-gateway-v6": "2001:db8:abcd::89",
		"dns": ["10.20.1.2","10.20.1.3"]
	}
	
核心配置选项为bip，即bridge ip之意，用于指定docker0桥自身的ip地址；其他选项可以通过地址计算得出；
	

如何修改docker套接字配置：【这样其他docker客户端就可以连外部的docker server了】
docker守护进程的c/s架构，其默认仅监听Unix Socket格式的地址，/var/run/docker.sock；如果使用TCP套接字，则需要修改配置文件/etc/docker/daemon.json:

案例如下：
vim /etc/docker/daemon.json
	{
		...,
		"hosts": ["tcp://0.0.0.0:2375","unix:///var/run/docker.sock"]
	}
	
也可以向dockerd直接传递”-H|--host“选项；

修改完毕之后，在外部docker服务器上，可以查看外部docker服务器信息：
	docker -H 172.16.60.17:2375 ps -a     【连接172.16.60.17的docker服务器上查看有哪些容器】
	
	
	
	
创建额外的docker桥：
	docker network create -d bridge --subnet "172.20.0.0/16" --gateway "172.20.0.1" mybr0
	
	修改完毕后，需要重载docker进程生效
	systemctl restart docker.service
	
创建新的容器，加入mybr0桥网络：
	docker run --name t1 --net mybr0 busybox:latest


